const admin = require('firebase-admin')
const { createDocumentWithTimestamp } = require('./utils/validation')

const seedDatabase = async () => {
  try {
    console.log('üå± Iniciando seed do banco de dados...')

    // Verificar se j√° existem dados
    const buildingsSnapshot = await admin
      .firestore()
      .collection('buildings')
      .get()
    if (buildingsSnapshot.size > 0) {
      console.log('‚ö†Ô∏è Banco j√° possui dados. Pulando seed.')
      return
    }

    // Criar usu√°rio admin
    console.log('üë§ Criando usu√°rio admin...')
    const adminUser = await admin.auth().createUser({
      email: 'admin@workspace.com',
      password: 'admin123',
      displayName: 'Administrador',
      emailVerified: true
    })

    const adminData = createDocumentWithTimestamp({
      name: 'Administrador',
      email: 'admin@workspace.com',
      role: 'admin',
      is_active: true,
      firebase_uid: adminUser.uid
    })

    await admin
      .firestore()
      .collection('users')
      .doc(adminUser.uid)
      .set(adminData)

    // Criar usu√°rio comum
    console.log('üë§ Criando usu√°rio comum...')
    const regularUser = await admin.auth().createUser({
      email: 'user@workspace.com',
      password: 'user123',
      displayName: 'Usu√°rio Teste',
      emailVerified: true
    })

    const userData = createDocumentWithTimestamp({
      name: 'Usu√°rio Teste',
      email: 'user@workspace.com',
      role: 'user',
      is_active: true,
      firebase_uid: regularUser.uid
    })

    await admin
      .firestore()
      .collection('users')
      .doc(regularUser.uid)
      .set(userData)

    // Criar pr√©dios
    console.log('üè¢ Criando pr√©dios...')
    const buildings = [
      {
        name: 'Edif√≠cio Central',
        address: 'Rua das Flores, 123',
        city: 'S√£o Paulo',
        state: 'SP',
        zip_code: '01234-567',
        country: 'Brasil',
        description: 'Pr√©dio principal da empresa com modernas instala√ß√µes',
        settings: {
          business_hours: {
            monday: { start: '08:00', end: '18:00', enabled: true },
            tuesday: { start: '08:00', end: '18:00', enabled: true },
            wednesday: { start: '08:00', end: '18:00', enabled: true },
            thursday: { start: '08:00', end: '18:00', enabled: true },
            friday: { start: '08:00', end: '18:00', enabled: true },
            saturday: { start: '08:00', end: '12:00', enabled: false },
            sunday: { start: '08:00', end: '12:00', enabled: false }
          },
          booking_rules: {
            max_advance_days: 30,
            min_duration_minutes: 30,
            max_duration_minutes: 480,
            max_concurrent_bookings: 3,
            check_in_window_minutes: 15
          },
          amenities: ['Wi-Fi', 'Ar condicionado', 'Projetor', 'Caf√©']
        },
        contact_info: {
          phone: '(11) 1234-5678',
          email: 'central@workspace.com',
          manager: 'Jo√£o Silva'
        }
      },
      {
        name: 'Torre Norte',
        address: 'Av. Paulista, 1000',
        city: 'S√£o Paulo',
        state: 'SP',
        zip_code: '01310-100',
        country: 'Brasil',
        description: 'Torre moderna com vista panor√¢mica da cidade',
        settings: {
          business_hours: {
            monday: { start: '07:00', end: '19:00', enabled: true },
            tuesday: { start: '07:00', end: '19:00', enabled: true },
            wednesday: { start: '07:00', end: '19:00', enabled: true },
            thursday: { start: '07:00', end: '19:00', enabled: true },
            friday: { start: '07:00', end: '19:00', enabled: true },
            saturday: { start: '09:00', end: '13:00', enabled: true },
            sunday: { start: '09:00', end: '13:00', enabled: false }
          },
          booking_rules: {
            max_advance_days: 60,
            min_duration_minutes: 60,
            max_duration_minutes: 600,
            max_concurrent_bookings: 5,
            check_in_window_minutes: 30
          },
          amenities: [
            'Wi-Fi',
            'Ar condicionado',
            'Projetor',
            'Caf√©',
            'Estacionamento'
          ]
        },
        contact_info: {
          phone: '(11) 9876-5432',
          email: 'norte@workspace.com',
          manager: 'Maria Santos'
        }
      }
    ]

    const buildingRefs = []
    for (const buildingData of buildings) {
      const buildingDoc = createDocumentWithTimestamp(buildingData)
      const docRef = await admin
        .firestore()
        .collection('buildings')
        .add(buildingDoc)
      buildingRefs.push({ id: docRef.id, ...buildingDoc })
    }

    // Criar andares
    console.log('üèóÔ∏è Criando andares...')
    const floors = [
      // Edif√≠cio Central
      {
        building_id: buildingRefs[0].id,
        name: 'T√©rreo',
        floor_number: 0,
        description: 'Recep√ß√£o e √°reas comuns'
      },
      {
        building_id: buildingRefs[0].id,
        name: '1¬∫ Andar',
        floor_number: 1,
        description: 'Escrit√≥rios administrativos'
      },
      {
        building_id: buildingRefs[0].id,
        name: '2¬∫ Andar',
        floor_number: 2,
        description: 'Salas de reuni√£o e espa√ßos colaborativos'
      },
      {
        building_id: buildingRefs[0].id,
        name: '3¬∫ Andar',
        floor_number: 3,
        description: 'Escrit√≥rios executivos'
      },

      // Torre Norte
      {
        building_id: buildingRefs[1].id,
        name: 'T√©rreo',
        floor_number: 0,
        description: 'Lobby e recep√ß√£o'
      },
      {
        building_id: buildingRefs[1].id,
        name: '1¬∫ Andar',
        floor_number: 1,
        description: 'Cafeteria e √°rea de conviv√™ncia'
      },
      {
        building_id: buildingRefs[1].id,
        name: '2¬∫ Andar',
        floor_number: 2,
        description: 'Escrit√≥rios abertos'
      },
      {
        building_id: buildingRefs[1].id,
        name: '3¬∫ Andar',
        floor_number: 3,
        description: 'Salas de reuni√£o'
      },
      {
        building_id: buildingRefs[1].id,
        name: '4¬∫ Andar',
        floor_number: 4,
        description: 'Espa√ßos de trabalho flex√≠vel'
      }
    ]

    const floorRefs = []
    for (const floorData of floors) {
      const floorDoc = createDocumentWithTimestamp(floorData)
      const docRef = await admin.firestore().collection('floors').add(floorDoc)
      floorRefs.push({ id: docRef.id, ...floorDoc })
    }

    // Criar espa√ßos
    console.log('ü™ë Criando espa√ßos...')
    const spaces = [
      // Edif√≠cio Central - T√©rreo
      {
        floor_id: floorRefs[0].id,
        name: 'Recep√ß√£o',
        type: 'reception',
        capacity: 2,
        description: '√Årea de recep√ß√£o principal',
        amenities: ['Wi-Fi', 'Ar condicionado']
      },

      // Edif√≠cio Central - 1¬∫ Andar
      {
        floor_id: floorRefs[1].id,
        name: 'Escrit√≥rio 101',
        type: 'office',
        capacity: 4,
        description: 'Escrit√≥rio compartilhado',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesa individual']
      },
      {
        floor_id: floorRefs[1].id,
        name: 'Escrit√≥rio 102',
        type: 'office',
        capacity: 6,
        description: 'Escrit√≥rio em equipe',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesa compartilhada']
      },

      // Edif√≠cio Central - 2¬∫ Andar
      {
        floor_id: floorRefs[2].id,
        name: 'Sala de Reuni√£o A',
        type: 'meeting_room',
        capacity: 8,
        description: 'Sala para reuni√µes pequenas',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Projetor', 'Quadro branco']
      },
      {
        floor_id: floorRefs[2].id,
        name: 'Sala de Reuni√£o B',
        type: 'meeting_room',
        capacity: 12,
        description: 'Sala para reuni√µes m√©dias',
        amenities: [
          'Wi-Fi',
          'Ar condicionado',
          'Projetor',
          'Quadro branco',
          'Sistema de √°udio'
        ]
      },
      {
        floor_id: floorRefs[2].id,
        name: 'Espa√ßo Colaborativo',
        type: 'collaborative',
        capacity: 20,
        description: '√Årea para trabalho em equipe',
        amenities: [
          'Wi-Fi',
          'Ar condicionado',
          'Mesas m√≥veis',
          'Quadros brancos'
        ]
      },

      // Edif√≠cio Central - 3¬∫ Andar
      {
        floor_id: floorRefs[3].id,
        name: 'Escrit√≥rio Executivo 301',
        type: 'office',
        capacity: 2,
        description: 'Escrit√≥rio privativo',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesa executiva', 'Poltrona']
      },
      {
        floor_id: floorRefs[3].id,
        name: 'Escrit√≥rio Executivo 302',
        type: 'office',
        capacity: 2,
        description: 'Escrit√≥rio privativo',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesa executiva', 'Poltrona']
      },

      // Torre Norte - T√©rreo
      {
        floor_id: floorRefs[4].id,
        name: 'Lobby Principal',
        type: 'reception',
        capacity: 5,
        description: '√Årea de recep√ß√£o e espera',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Poltronas']
      },

      // Torre Norte - 1¬∫ Andar
      {
        floor_id: floorRefs[5].id,
        name: 'Cafeteria',
        type: 'cafeteria',
        capacity: 30,
        description: '√Årea de alimenta√ß√£o e conviv√™ncia',
        amenities: ['Wi-Fi', 'Ar condicionado', 'M√°quina de caf√©', 'Microondas']
      },

      // Torre Norte - 2¬∫ Andar
      {
        floor_id: floorRefs[6].id,
        name: 'Escrit√≥rio Aberto A',
        type: 'open_office',
        capacity: 15,
        description: 'Espa√ßo de trabalho aberto',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesas compartilhadas']
      },
      {
        floor_id: floorRefs[6].id,
        name: 'Escrit√≥rio Aberto B',
        type: 'open_office',
        capacity: 15,
        description: 'Espa√ßo de trabalho aberto',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesas compartilhadas']
      },

      // Torre Norte - 3¬∫ Andar
      {
        floor_id: floorRefs[7].id,
        name: 'Sala de Confer√™ncia',
        type: 'conference',
        capacity: 20,
        description: 'Sala para grandes reuni√µes',
        amenities: [
          'Wi-Fi',
          'Ar condicionado',
          'Projetor',
          'Sistema de √°udio',
          'Videoconfer√™ncia'
        ]
      },
      {
        floor_id: floorRefs[7].id,
        name: 'Sala de Treinamento',
        type: 'training',
        capacity: 25,
        description: 'Sala para treinamentos e workshops',
        amenities: [
          'Wi-Fi',
          'Ar condicionado',
          'Projetor',
          'Quadro branco',
          'Mesas em U'
        ]
      },

      // Torre Norte - 4¬∫ Andar
      {
        floor_id: floorRefs[8].id,
        name: 'Espa√ßo Flex√≠vel A',
        type: 'flexible',
        capacity: 10,
        description: 'Espa√ßo adapt√°vel para diferentes usos',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesas m√≥veis', 'Divis√≥rias']
      },
      {
        floor_id: floorRefs[8].id,
        name: 'Espa√ßo Flex√≠vel B',
        type: 'flexible',
        capacity: 10,
        description: 'Espa√ßo adapt√°vel para diferentes usos',
        amenities: ['Wi-Fi', 'Ar condicionado', 'Mesas m√≥veis', 'Divis√≥rias']
      },
      {
        floor_id: floorRefs[8].id,
        name: 'Sala de Estudos',
        type: 'study',
        capacity: 6,
        description: 'Ambiente silencioso para estudos',
        amenities: [
          'Wi-Fi',
          'Ar condicionado',
          'Mesa individual',
          'Ilumina√ß√£o adequada'
        ]
      }
    ]

    const spaceRefs = []
    for (const spaceData of spaces) {
      const spaceDoc = createDocumentWithTimestamp({
        ...spaceData,
        is_active: true,
        is_bookable: true
      })
      const docRef = await admin.firestore().collection('spaces').add(spaceDoc)
      spaceRefs.push({ id: docRef.id, ...spaceDoc })
    }

    // Criar algumas reservas de exemplo
    console.log('üìÖ Criando reservas de exemplo...')
    const now = new Date()
    const tomorrow = new Date(now)
    tomorrow.setDate(tomorrow.getDate() + 1)
    tomorrow.setHours(9, 0, 0, 0)

    const dayAfterTomorrow = new Date(tomorrow)
    dayAfterTomorrow.setHours(11, 0, 0, 0)

    const reservations = [
      {
        user_id: regularUser.uid,
        space_id: spaceRefs[3].id, // Sala de Reuni√£o A
        start_time: admin.firestore.Timestamp.fromDate(tomorrow),
        end_time: admin.firestore.Timestamp.fromDate(dayAfterTomorrow),
        title: 'Reuni√£o de Planejamento',
        description: 'Reuni√£o semanal da equipe',
        attendees_count: 6,
        status: 'confirmed'
      },
      {
        user_id: adminUser.uid,
        space_id: spaceRefs[4].id, // Sala de Reuni√£o B
        start_time: admin.firestore.Timestamp.fromDate(
          new Date(tomorrow.getTime() + 2 * 60 * 60 * 1000)
        ), // 2 horas depois
        end_time: admin.firestore.Timestamp.fromDate(
          new Date(tomorrow.getTime() + 4 * 60 * 60 * 1000)
        ), // 4 horas depois
        title: 'Apresenta√ß√£o Executiva',
        description: 'Apresenta√ß√£o de resultados para diretoria',
        attendees_count: 10,
        status: 'confirmed'
      }
    ]

    for (const reservationData of reservations) {
      const reservationDoc = createDocumentWithTimestamp(reservationData)
      await admin.firestore().collection('reservations').add(reservationDoc)
    }

    console.log('‚úÖ Seed do banco de dados conclu√≠do com sucesso!')
    console.log(`üìä Dados criados:`)
    console.log(`   - ${buildings.length} pr√©dios`)
    console.log(`   - ${floors.length} andares`)
    console.log(`   - ${spaces.length} espa√ßos`)
    console.log(`   - ${reservations.length} reservas`)
    console.log(`   - 2 usu√°rios (admin e comum)`)
    console.log('')
    console.log('üîë Credenciais de acesso:')
    console.log('   Admin: admin@workspace.com / admin123')
    console.log('   Usu√°rio: user@workspace.com / user123')
  } catch (error) {
    console.error('‚ùå Erro durante o seed:', error)
    throw error
  }
}

module.exports = {
  seedDatabase
}
